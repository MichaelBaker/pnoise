Perlin noise benchmark.

Runs perlin noise 256x256 image generation 100 times.

Currently the frontend is just a bunch of shell scripts to compile/run compiled
versions of it. You'll have to run scripted versions manually with the
interpreter of your choice.

Example output of the run on my machine (intel i5-3470, 64 bit) and the versions I use:

clang version 3.6.0 (tags/RELEASE_360/final)
gcc (GCC) 4.9.2 20150304 (prerelease)
Mono C# compiler version 4.0.1.0
Mono JIT compiler version 4.0.1 (tarball Tue May 19 20:07:41 UTC 2015)
F# Compiler for F# 3.1 (Open Source Edition)
DMD64 D Compiler v2.067
LDC - the LLVM D compiler (0.15.1):
  based on DMD v2.066.1 and LLVM 3.5.1
gdc (GCC) 4.9.2
go version go1.7.1 linux/amd64
gccgo (GCC) 4.9.2 20150304 (prerelease)
rustc 1.0.0-dev (built 2015-05-17)
Nim Compiler Version 0.11.2 (2015-05-05) [Linux: amd64]
Crystal 0.7.1 (Пн май 11 00:47:29 UTC 2015)
java version "1.7.0_40"
Java(TM) SE Runtime Environment (build 1.7.0_40-b43)
Java HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)

=== clang -O3:
       0,156677472 seconds time elapsed

=== gcc -O3:
       0,075984163 seconds time elapsed

=== mono C#:
       0,549332570 seconds time elapsed

=== mono F#:
       0,574667450 seconds time elapsed

=== D (dmd):
       0,346574283 seconds time elapsed

=== D (ldc2):
       0,100076327 seconds time elapsed

=== D (gdc):
       0,067106168 seconds time elapsed

=== Go gc:
       0,287522697 seconds time elapsed

=== Go gccgo -O3:
       0,176843422 seconds time elapsed

=== Rust:
       0,074902613 seconds time elapsed

=== Nim (gcc):
       0,160059764 seconds time elapsed

=== Nim (clang):
       0,108235264 seconds time elapsed

=== Crystal:
       0,071615525 seconds time elapsed

=== Java:
       0,603974271 seconds time elapsed
